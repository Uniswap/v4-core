name: code coverage

on:
  pull_request:
    branches:
      - main

jobs:
  comment-forge-coverage:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install foundry
        uses: foundry-rs/foundry-toolchain@v1
        with:
          version: nightly
      - name: Run Forge build
        run: |
          forge --version
          forge build --sizes --via-ir
        id: build
      - name: Run forge coverage
        id: coverage
        run: |
          {
          echo 'COVERAGE<<EOF'
          forge coverage --ir-minimum | grep '^|' | grep -v 'test/' | tr -d \` | tr -d $ | tr -d { | tr -d }
          echo EOF
          } >> "$GITHUB_OUTPUT"
        env:
          FOUNDRY_RPC_URL: "${{ secrets.RPC_URL }}"

      - name: Check coverage is updated
        uses: actions/github-script@v5
        env:
          OUTPUT: ${{ steps.coverage.outputs.COVERAGE }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { OUTPUT } = process.env;
            const fs = require('fs');
            const file = "coverage.txt"
            if(!fs.existsSync(file)) {
              console.log("Nothing to check");
              return
            }
            const currentCoverage = fs.readFileSync(file, "utf8").trim();
            const newCoverage = (`${ OUTPUT }`).trim();
            if (newCoverage != currentCoverage) {
              core.setFailed(`Code coverage not updated. Run : forge coverage | grep '^|' | grep -v 'test/'  > coverage.txt`);
            }

      - name: Comment on PR
        id: comment
        uses: actions/github-script@v5
        env:
          OUTPUT: ${{ steps.coverage.outputs.COVERAGE }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { OUTPUT } = process.env;
            const {data: comments} = await github.rest.issues.listComments({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number, 
              })

            const botComment = comments.find(comment => comment.user.id === 41898282)

            const commentBody = `Forge code coverage:\n${ OUTPUT }\n`;

            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: commentBody
              })
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: commentBody
              });
            }

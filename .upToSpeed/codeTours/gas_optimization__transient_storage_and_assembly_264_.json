{
    "title": "Gas Optimization: Transient Storage and Assembly",
    "id": "/6zj32++yBGOwlUGVqr/0+jfGVITG3J4AF81tMJZznI=",
    "steps": [
        {
            "type": "textOnly",
            "description": "Welcome to this tour on gas optimization techniques in Uniswap v4. We'll explore two key strategies: transient storage and inline assembly.",
            "title": "",
            "id": "2406"
        },
        {
            "type": "revealFiles",
            "files": [
                "src/libraries/Lock.sol"
            ],
            "description": "The Lock library demonstrates the use of transient storage. This is a temporary, gas-efficient storage mechanism that uses `tstore` and `tload` operations. These operations are implemented using inline assembly for direct interaction with the Ethereum Virtual Machine (EVM).",
            "title": "",
            "id": "2407"
        },
        {
            "type": "highlight",
            "description": "Transient storage is a gas-efficient storage mechanism introduced in Ethereum's EIP-1153. It provides temporary storage that only persists for the duration of a transaction. This makes it significantly cheaper than regular storage operations, as the data doesn't need to be persisted in the blockchain state. Transient storage is particularly useful for temporary values that are only needed within a single transaction, such as lock states or intermediate calculation results.",
            "file": "src/libraries/Lock.sol",
            "highlight": [
                {
                    "start": 10,
                    "end": 27
                }
            ],
            "title": "",
            "id": "2425"
        },
        {
            "type": "revealFiles",
            "files": [
                "src/libraries/CustomRevert.sol"
            ],
            "description": "The CustomRevert library showcases the use of inline assembly for efficient custom error handling. It lacks the overhead of Solidity's built-in `revert` keyword.",
            "title": "",
            "id": "2409"
        },
        {
            "type": "highlight",
            "description": "The UnsafeMath library provides low-level mathematical operations without overflow or underflow checks. The `divRoundingUp` function performs division with rounding up, without any overflow checks. This is more gas-efficient but requires careful use to ensure mathematical safety.",
            "file": "src/libraries/UnsafeMath.sol",
            "highlight": [
                {
                    "start": 12,
                    "end": 16
                }
            ],
            "title": "",
            "id": "2412"
        },
        {
            "type": "textOnly",
            "description": "You have now seen some of the gas optimization techniques fundamental to Uniswap v4's scalability.",
            "title": "",
            "id": "2413"
        }
    ]
}
